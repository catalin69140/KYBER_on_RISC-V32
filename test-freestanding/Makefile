# --- Global Setup and Includes ---

# Set the base directory to the current directory.
TOP=.
# Include common build rules, typically defining variables like CC, AS, LD, CFLAGS, etc.
# This file often sets the RISC-V cross-compiler toolchain prefix.
include $(TOP)/Make.rules

# --- Linker Libraries and Compiler Optimizations ---

# Libraries to link with the final executable.
# -lc: The C standard library (often newlib or similar for embedded).
# -lgcc: The GCC support library, containing helper functions for things like integer math.
LDLIBS = -lc -lgcc

# Add level 2 optimization flags for the C compiler.
CFLAGS += -O2

# --- Linker Flags (LDFLAGS) ---

# The following line is commented out, but would disable linker relaxation,
# which can sometimes be useful for debugging or highly optimized code sections.
#LDFLAGS += -Wl,--no-relax

# Pass options to the linker (via -Wl,).
# -T,vanilla.ld: Explicitly specify 'vanilla.ld' as the linker script.
# This script defines memory layout (flash, RAM addresses) for the target hardware.
LDFLAGS += -Wl,-T,vanilla.ld

# --- Targets and RISC-V Configuration (Build Settings) ---

# List of programs (executables) to be built.
# 'prog.lst' is often a disassembly listing generated by the 'size' command below.
PROGS=prog prog.lst

# Defines the specific RISC-V architecture (ISA string) to target.
# 'rv32im' is the base 32-bit integer ISA (I) plus integer multiplication/division (M).
# '_zicsr' adds Control and Status Register (CSR) instructions.
# '_zifencei' adds the Instruction Fence (FENCE.I) instruction for cache/pipeline synchronization.
RISCV_ARCH ?= rv32im_zicsr_zifencei

# Defines the Application Binary Interface (ABI).
# 'ilp32' means Integer, Long, and Pointer types are all 32-bit.
# This is the standard ABI for the rv32 ISA without floating-point extensions.
RISCV_ABI  ?= ilp32

# Append RISC-V specific flags to the C compiler flags (CFLAGS).
# -march: Specifies the target RISC-V architecture.
# -mabi: Specifies the target RISC-V ABI.
CFLAGS  += -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI)

# Append the same flags to the Assembler flags (ASFLAGS).
# Essential for assembly files to correctly interpret instructions and register usage.
ASFLAGS += -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI)

# Append the same flags to the Linker flags (LDFLAGS).
# Ensures the linker uses the correct standard library versions and linking conventions
# for the specified ISA and ABI.
LDFLAGS += -march=$(RISCV_ARCH) -mabi=$(RISCV_ABI)

# --- Build Rules ---

# Default target: build all specified programs.
all:: $(PROGS)

# Rule to build the final executable 'prog'.
# It depends on 'crt0.o' (the C Run-Time initialization file, the entry point)
# and any object files generated from source (implicitly handled by Makefile's built-in rules).
prog: crt0.o
	# The default link command (LINK.c) creates the executable.
	# $@: target name (prog); $^: prerequisites (crt0.o + others); $(LDLIBS): linked libraries.
	$(LINK.c) -o $@ $^ $(LDLIBS)
	# Use 'size' to output the size of the text, data, and bss sections.
	# -A: print in SysV format; -x: print in hex. This helps create the prog.lst file.
	$(SIZE) -A -x $@

# Rule to clean up the build directory.
clean::
	# Remove executables (*.o) and intermediate/listing files.
	rm -f $(PROGS) *.o *.s *.lst
